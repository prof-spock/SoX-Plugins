/**
 * @file
 * The <C>AudioSampleListVector</C> body implements the communication
 * buffer structure for the block processing of audio effects; it is a
 * list of audio sample lists containing the input samples and the
 * finally (processed) output samples <I>(this is the effective code
 * include file for conditional inlining)</I>.
 *
 * @author Dr. Thomas Tensi
 * @date   2020-08
 */

/*=========*/
/* IMPORTS */
/*=========*/

using Audio::AudioSampleListVector;

/*====================*/

INLINE
String AudioSampleListVector::toString (IN Natural frameCount,
                                        IN Boolean isGroupedByFrames) const
{
    const Natural effectiveFrameCount =
        Natural::minimum(frameCount, this->frameCount());
    const Natural listCount = length();
    const Natural elementCountInGroup =
        (isGroupedByFrames ? listCount : effectiveFrameCount);
    const Natural groupCount =
        (isGroupedByFrames ? effectiveFrameCount : listCount);
    String result = "AudioSampleListVector(";
    
    for (Natural i = 0;  i < groupCount;  i++) {
        result += (i > 0 ? ", " : "");
        result += "(";

        for (Natural j = 0;  j < elementCountInGroup;  j++) {
            result += (j > 0 ? ", " : "");
            AudioSample value = (isGroupedByFrames
                                 ? at(j).at(i)
                                 : at(i).at(j));
            result += value.toString();
        }

        result += ")";
    }

    result += ")";
    return result;
}

/*--------------------*/

INLINE
Natural AudioSampleListVector::frameCount () const
{
    Natural result = (length() == 0 ? 0 : at(0).length());
    return result;
}

/*--------------------*/

INLINE
void AudioSampleListVector::setFrameCount (IN Natural newFrameCount)
{
    for (AudioSampleList& list : *this) {
        list.setLength(newFrameCount);
    }
}

/*--------------------*/

INLINE
void AudioSampleListVector::setToZero (IN Natural position,
                                       IN Natural count)
{
    for (AudioSampleList& list : *this) {
        list.setToZero(position, count);
    }
}

/*--------------------*/

INLINE
void AudioSampleListVector::extend (IN AudioSampleListVector& other,
                                    IN Natural frameCount)
{
    const Natural channelCount = length();
    
    for (Natural i = 0;  i < channelCount;  i++) {
        AudioSampleList& currentList = at(i);
        const AudioSampleList& otherList = other.at(i);
        currentList.extend(otherList, frameCount);
    }
}
