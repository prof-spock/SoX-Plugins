/**
 * @file
 * The <C>AudioSampleList</C> body implements a simple list of
 * audio samples <I>(this is the effective code include file for
 * conditional inlining)</I>.
 *
 * @author Dr. Thomas Tensi
 * @date   2020-08
 */

/*=========*/
/* IMPORTS */
/*=========*/

#include "MyArray.h"

/*--------------------*/

using Audio::AudioSampleList;
using BaseTypes::Containers::clearArray;
using BaseTypes::Containers::copyArray;

/*====================*/

INLINE String Audio::_audioSampleListTypeName ()
{
    return "AudioSampleList";
}

/*--------------------*/

INLINE
void AudioSampleList::setToZero (IN Natural position,
                                 IN Natural count)
{
    const Natural currentLength = length();

    if (position < currentLength) {
        const Natural effectiveCount =
            Natural::minimum(currentLength - position, count);
        AudioSample* sampleArray = asArray(position);
        clearArray(sampleArray, effectiveCount, AudioSample{0.0f});
    }
}

/*--------------------*/

INLINE
void AudioSampleList::extend (IN AudioSampleList& other,
                              IN Natural count)
{
    const Natural effectiveCount =
        Natural::minimum(count, other.length());

    if (effectiveCount > 0) {
        const Natural currentLength = length();

        /* ensure that length is sufficient for storing remaining
         * elements */
        ensureLength(currentLength + effectiveCount);

        AudioSample* targetArray = asArray(currentLength);
        const AudioSample* sourceArray = other.asArray();
        copyArray(targetArray, sourceArray,
                  effectiveCount);
  }
}

/*--------------------*/

INLINE
AudioSampleList AudioSampleList::slice (IN AudioSampleList& list,
                                        IN Integer firstPosition,
                                        IN Integer lastPosition)
{
    return AudioSampleList{GenericList::slice(list,
                                              firstPosition,
                                              lastPosition)};
}
